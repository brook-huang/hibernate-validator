<?xml version="1.0" encoding="UTF-8"?>
<!--
	~ JBoss, Home of Professional Open Source
	~ Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual contributors
	~ by the @authors tag. See the copyright.txt in the distribution for a
	~ full listing of individual contributors.
	~
	~ Licensed under the Apache License, Version 2.0 (the "License");
	~ you may not use this file except in compliance with the License.
	~ You may obtain a copy of the License at
	~ http://www.apache.org/licenses/LICENSE-2.0
	~ Unless required by applicable law or agreed to in writing, software
	~ distributed under the License is distributed on an "AS IS" BASIS,
	~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	~ See the License for the specific language governing permissions and
	~ limitations under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hv.ent">
%BOOK_ENTITIES;
]>
<chapter id="chapter-message-interpolation">
  <title>Message interpolation</title>

  <para>As we will see in <xref linkend="validator-customconstraints"/> each
  constraint definition must define a default message descriptor. This message
  can be overridden at declaration time using the
  <methodname>message</methodname> attribute of the constraint. You can see
  this in <xref linkend="example-driver"/>. This message descriptors get
  interpolated when a constraint validation fails using the configured
  <classname>MessageInterpolator</classname>. The interpolator will try to
  resolve any message parameters, meaning string literals enclosed in braces.
  In order to resolve these parameters Hibernate Validator's default
  <classname>MessageInterpolator</classname> first recursively resolves
  parameters against a custom <classname>ResourceBundle</classname> called
  <filename>ValidationMessages.properties</filename> at the root of the
  classpath (It is up to you to create this file). If no further replacements
  are possible against the custom bundle the default
  <classname>ResourceBundle</classname> under
  <filename>/org/hibernate/validator/ValidationMessages.properties</filename>
  gets evaluated. If a replacement occurs against the default bundle the
  algorithm looks again at the custom bundle (and so on). Once no further
  replacements against these two resource bundles are possible remaining
  parameters are getting resolved against the attributes of the constraint to
  be validated.</para>

  <para>Since the braces { and } have special meaning in the messages they
  need to be escaped if they are used literally. The following The following
  rules apply:<itemizedlist>
      <listitem>
        <para>\{ is considered as the literal {</para>
      </listitem>

      <listitem>
        <para>\} is considered as the literal }</para>
      </listitem>

      <listitem>
        <para>\\ is considered as the literal \</para>
      </listitem>
    </itemizedlist></para>

  <para>If the default message interpolator does not fit your requirements it
  is possible to plug a custom <classname>MessageInterpolator</classname> when
  the <classname>ValidatorFactory</classname> gets created. This can be seen
  in <xref linkend="validator-bootstrapping"/>.</para>
</chapter>
